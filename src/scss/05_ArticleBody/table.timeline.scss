.tl {
    border-width : 0;

    @include highContrast {
        border-collapse: collapse;
    }

    th, td {
        background : none !important;
    }
    
    thead th, thead td, tbody th {
        color : $COLOR_Default_text;
    }

    thead th {
        border-width : 0 0 1px 0;
    }
    thead td {
        border-width : 0 0 1px .3em;
    }

    thead th, thead td {
        border-color   : $COLOR_Default_casual_fill;
        padding-top    : .5em;
        padding-bottom : .5em;
    }

    th {
        padding        : .5em .8em .5em .5em;
        border-width   : 0;
        vertical-align : top;
        text-align     : left;
    }
    td {
        @if( $CANUSE_GOOD_CSS_GENERATED_BLOCK ){
            position : relative;
        }
        padding        : .5em .8em;
        vertical-align : top;
        border-width   : 0 0 0 .3em;
        border-color   : $COLOR_Default_casual_fill;
        border-style   : solid;
        @include highContrastForIE10ToEdge {
            border-color : inherit;
        }

        @if( $CANUSE_1ST_CHILD_SELECTOR ){
            & > *:first-child {
                margin-top : 0;
            }
        } @else {
            & * {
                margin-top : 0;
            }
        }
    }

    @if( $CANUSE_GOOD_CSS_GENERATED_BLOCK ){
        tbody td:before, tbody td:after {
            @include createCSSGeneratedBlock;
            text-indent  : -1em;
            position     : absolute;
            border-width : .3em;
        }
        @if( $CANUSE_EMPTY_PSEUDO_CLASS ){
            tbody :empty:before, tbody :empty:after {
                display : none; /* for iOS4 content : none だけでは消えない */
            }
        }
        /* td に対する絶対配置は Iron14 と Windows Safari 5.1.1 で動作, Iron8 では不可 body が親になる. */
        /* Webkit 534.51, 535 が可, ~534.? が不可ということ? */
        /* td に対する絶対配置は Opera 10.54 で動作, Opera ~10 では非表示. */
        tbody td:before {
            top          : .6em;
            left         : -0.75em;
            width        : 0;
            height       : 0;
            border-width : .6em;
            border-color : $COLOR_Default_casual_fill;
            @include border-radius(.6em);
        }
        tbody td:after {
            top          : .85em;
            left         : -0.5em;
            width        : 0;
            height       : 0;
            border-width : .35em;
            border-color : $COLOR_Default_fill;
            @include border-radius(.35em);
            @if( $UA_Modern ){
                @media only screen and (-ms-high-contrast : black-on-white) {
                    & { border-color : #fff; }
                }
                @media only screen and (-ms-high-contrast : white-on-black) {
                    & { border-color : #000; }
                }
                @include highContrastForIEGte9Gecko {
                    filter : invert(100%);
                }
                @include highContrastForChromiumEdge {
                    filter : invert(100%);
                }
            }
            @if( $UA_IE8 ){
                @include highContrastForIEGte9Gecko {
                    top          : 1.2em;
                    left         : -.13em;
                    border-width : 0;
                    outline      : .35em solid invert;
                }
            }
        }
    }

    /*  patch for Safari ~4.x
    --------------------------------------------------------------------------------------*/
    @include media(chromeLte5OrSafariLte4){
        td:before, td:after {
            display : none !important; // tebla-cell に対して絶対配置が出来ない
        }
    }

    tfoot th {
        border-width : 1px 0 0;
    }
    tfoot td {
        border-width : 1px 0 0 .3em;
        border-style : solid dotted;
        @include highContrastForIE10ToEdge {
            border-color : inherit;
        }
    }
    tfoot th, tfoot td {
        border-color   : $COLOR_Default_casual_fill;
        padding-top    : .5em;
        padding-bottom : .5em;
    }

    @if( $CANUSE_HOVER_PSEUDO_CLASS ){
        tbody :hover th,
        tbody :hover td {
            border-color : $COLOR_ACCENT;
        }
        @if( $CANUSE_GOOD_CSS_GENERATED_BLOCK ){
            tbody :hover td:before {
                border-color : $COLOR_ACCENT;
            }
        }
        tbody :hover th {
            background : $COLOR_ACCENT !important;
            color      : #fff;
        }
        tbody :hover th {
            :link, :visited {
                color : #fff;
            }
        }
    }

    thead, tbody th {
        :link, :link:hover {
            color : $COLOR_Default_link;
        }
        :visited, :visited:hover {
            color : $COLOR_Default_visited;
        }
    }
}

blockquote .tl {
    thead th, thead td,
    td,
    tfoot th, tfoot td {
        border-color : $COLOR_Default_casual_text;
    }
    
    @if( $CANUSE_GOOD_CSS_GENERATED_BLOCK ){
        tbody td:before {
            border-color : $COLOR_Default_casual_text;
        }
        tbody td:after {
            border-color : $COLOR_Default_casual_fill;
        }
    }
    tbody th :visited {
        color : $COLOR_Default_visited;
    }
}

/*  Dark theme
--------------------------------------------------------------------------------------*/
@include media(dark_theme) {
    .tl {
        thead th, thead td, tbody th {
            color : $COLOR_Watch_text;
        }

        thead th, thead td,
        td,
        tfoot th, tfoot td {
            border-color : $COLOR_Watch_casual_fill;
        }
        @if( $CANUSE_GOOD_CSS_GENERATED_BLOCK ){
            tbody td:before {
                border-color : $COLOR_Watch_casual_fill;
            }
            tbody td:after {
                border-color : $COLOR_Watch_fill;
            }
        }

        thead, tbody th {
            :link, :link:hover {
                color : $COLOR_Watch_link;
            }
            :visited, :visited:hover {
                color : $COLOR_Watch_visited;
            }
        }      
    }
    blockquote .tl {
        thead th, thead td,
        td,
        tfoot th, tfoot td {
            border-color : $COLOR_Watch_casual_text;
        }
        @if( $CANUSE_GOOD_CSS_GENERATED_BLOCK ){
            tbody td:before {
                border-color : $COLOR_Watch_casual_text;
            }
            tbody td:after {
                border-color : $COLOR_Watch_casual_fill;
            }
        }
        tbody th :visited {
            color : $COLOR_Watch_visited;
        }
    }  
}

/*  Print
--------------------------------------------------------------------------------------*/
@include media(print) {
    .tl, blockquote .tl {
        tbody td:after {
            border-color :#fff;
        }
    }
}